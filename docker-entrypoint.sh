#!/bin/sh

# O shell ir√° encerrar a execu√ß√£o do script quando um comando falhar
set -e

# Verificar se as vari√°veis de ambiente est√£o definidas
: "${POSTGRES_HOST:?Vari√°vel de ambiente POSTGRES_HOST n√£o definida}"
: "${POSTGRES_PORT:?Vari√°vel de ambiente POSTGRES_PORT n√£o definida}"
: "${DJANGO_SUPERUSER_USERNAME:?Vari√°vel de ambiente DJANGO_SUPERUSER_USERNAME n√£o definida}"
: "${DJANGO_SUPERUSER_EMAIL:?Vari√°vel de ambiente DJANGO_SUPERUSER_EMAIL n√£o definida}"
: "${DJANGO_SUPERUSER_PASSWORD:?Vari√°vel de ambiente DJANGO_SUPERUSER_PASSWORD n√£o definida}"

# Esperar at√© que o PostgreSQL esteja dispon√≠vel
while ! nc -z $POSTGRES_HOST $POSTGRES_PORT; do
  echo "üü° Waiting for Postgres Database Startup ($POSTGRES_HOST $POSTGRES_PORT) ..."
  sleep 2
done

echo "‚úÖ Postgres Database Started Successfully ($POSTGRES_HOST:$POSTGRES_PORT)"

# Verifica permiss√µes
#echo "Verificando permiss√µes no diret√≥rio do projeto..."
#ls -l /sistema_advocacia

#echo "Verificando permiss√µes no diret√≥rio de migra√ß√µes..."
#ls -l /sistema_advocacia/parceiros/migrations

python manage.py makemigrations --no-input
python manage.py migrate --no-input

# Criar o superusu√°rio se ele n√£o existir
python3 manage.py shell <<EOF
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='$DJANGO_SUPERUSER_USERNAME').exists():
    User.objects.create_superuser('$DJANGO_SUPERUSER_USERNAME', '$DJANGO_SUPERUSER_EMAIL', '$DJANGO_SUPERUSER_PASSWORD')
EOF

#exec gunicorn --bind 0.0.0.0:8000 config.wsgi:application
python3 manage.py runserver 0.0.0.0:8000 --noreload